version: "3"

services:
  flask:
    build: .
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f http://localhost:5000 || exit 1"]
    #   interval: 5s
    #   timeout: 5s
    #   retries: 3
    restart: unless-stopped
    ports:
      - "5000:5000"
    container_name: flask
    command: python main.py
    depends_on:
      - postgres

  postgres:
    image: 'postgres:alpine3.17'
    environment:
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      # If your wanna nopass authentication, 
      # you can use the following option:
      # POSTGRES_HOST_AUTH_METHOD: "trust"
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U postgres -d $POSTGRES_PASSWORD"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    restart: unless-stopped
    ports:
      - "5432:5432"
    container_name: postgres

  pgadmin:
    image: 'dpage/pgadmin4:2023-01-16-3'
    environment:
      PGADMIN_DEFAULT_EMAIL: $PGADMIN_EMAIL
      PGADMIN_DEFAULT_PASSWORD: $PGADMIN_PASSWORD
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8432 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    ports:
      - "8432:80"
    container_name: pgadmin
    depends_on:
      - postgres